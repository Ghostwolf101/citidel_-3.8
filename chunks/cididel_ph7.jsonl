{"doc_id": "cididel_ph7", "chunk_id": "cididel_ph7__0", "chunk_text": "echo \"🛡️ Deploying Phase 6: Advanced Firewall & IoT Segmentation...\"\n\n \n\n# ===== Step 1: Set Firewall Defaults with Protection =====\n\nuci set firewall.@defaults[0].input='REJECT'\n\nuci set firewall.@defaults[0].output='ACCEPT'\n\nuci set firewall.@defaults[0].forward='REJECT'\n\nuci set firewall.@defaults[0].synflood_protect='1'\n\nuci set firewall.@defaults[0].drop_invalid='1'\n\n \n\n# ===== Step 2: Clean Existing Zones (except lan & wan) =====\n\niptables -F\n\niptables -X\n\n \n\n# ===== Step 3: Define LAN zone =====\n\nuci set firewall.lan=zone\n\nuci set firewall.lan.name='lan'\n\nuci set firewall.lan.input='ACCEPT'\n\nuci set firewall.lan.output='ACCEPT'\n\nuci set firewall.lan.forward='ACCEPT'\n\nuci set firewall.lan.network='lan'\n\n \n\n# ===== Step 4: Define WAN zone =====\n\nuci set firewall.wan=zone\n\nuci set firewall.wan.name='wan'\n\nuci set firewall.wan.input='REJECT'\n\nuci set firewall.wan.output='ACCEPT'\n\nuci set firewall.wan.forward='REJECT'\n\nuci set firewall.wan.masq='1'\n\nuci set firewall.wan.mtu_fix='1'\n\nuci set firewall.wan.network='wan wan6'\n\n \n\n# ===== Step 5: Define IoT VLAN and zone =====\n\n# Assuming VLAN interface is 'eth0.3' — replace if different\n\nuci set network.iot='interface'\n\nuci set network.iot.ifname='eth0.3'\n\nuci set network.iot.proto='static'\n\nuci set network.iot.ipaddr='192.168.3.1'\n\nuci set network.iot.netmask='255.255.255.0'\n\nuci commit network\n\n \n\nuci set firewall.iot=zone\n\nuci set firewall.iot.name='iot'\n\nuci set firewall.iot.input='REJECT'\n\nuci set firewall.iot.output='ACCEPT'\n\nuci set firewall.iot.forward='REJECT'\n\nuci set firewall.iot.network='iot'\n\n \n\n# ===== Step 6: Allow forwarding LAN → WAN =====\n\nuci set firewall.lan_wan=forwarding\n\nuci set firewall.lan_wan.src='lan'\n\nuci set firewall.lan_wan.dest='wan'\n\n \n\n# ===== Step 7: Allow forwarding IoT → WAN (restricted) =====\n\nuci set firewall.iot_wan=forwarding\n\nuci set firewall.iot_wan.src='iot'\n\nuci set firewall.iot_wan.dest='wan'\n\n \n\n# ===== Step 8: Block WAN access to LuCI =====\n\nuci delete firewall.block_luci_from_wan 2>/dev/null\n\nuci set firewall.block_luci_from_wan='rule'\n\nuci set firewall.block_luci_from_wan.name='Block LuCI From WAN'\n\nuci set firewall.block_luci_from_wan.src='wan'\n\nuci set firewall.block_luci_from_wan.dest_port='80 443'\n\nuci set firewall.block_luci_from_wan.proto='tcp'\n\nuci set firewall.block_luci_from_wan.target='REJECT'\n\n \n\n# ===== Step 9: Drop all WAN input =====\n\nuci delete firewall.drop_all_wan_input 2>/dev/null\n\nuci set firewall.drop_all_wan_input='rule'\n\nuci set firewall.drop_all_wan_input.name='Drop All WAN Input'\n\nuci set firewall.drop_all_wan_input.src='wan'\n\nuci set firewall.drop_all_wan_input.proto='all'\n\nuci set firewall.drop_all_wan_input.target='DROP'\n\n \n\n# ===== Step 10: VPN Kill Switch Integration =====\n\nVPN_IF=\"tun0\"  # Change to wg0 or your VPN interface name\n\n \n\ncat <<EOF >> /etc/firewall.user\n\n \n\n# VPN Kill Switch\n\nif ! ip a show \"$VPN_IF\" up | grep -q \"inet \"; then\n\n    logger \"[KILL SWITCH] VPN interface $VPN_IF is down — blocking WAN\"\n\n    iptab", "source_filename": "cididel_ph7.txt", "source_sha256": "c8ab9ca74f2548aca000db49bdbd65042cb878d51e3469a870988e586aa01f19", "chunk_index": 0, "total_chunks": 2}
{"doc_id": "cididel_ph7", "chunk_id": "cididel_ph7__1", "chunk_text": " name\n\n \n\ncat <<EOF >> /etc/firewall.user\n\n \n\n# VPN Kill Switch\n\nif ! ip a show \"$VPN_IF\" up | grep -q \"inet \"; then\n\n    logger \"[KILL SWITCH] VPN interface $VPN_IF is down — blocking WAN\"\n\n    iptables -I FORWARD -o eth0 -j DROP\n\n    iptables -I OUTPUT -o eth0 -j DROP\n\nelse\n\n    logger \"[KILL SWITCH] VPN interface $VPN_IF is UP — WAN allowed\"\n\nfi\n\nEOF\n\n \n\n# ===== Step 11: Enable DROP logging =====\n\nuci set firewall.@defaults[0].log='1'\n\n \n\n# ===== Step 12: Install and configure banIP for auto blocking =====\n\nopkg update\n\nopkg install luci-app-banip ipset curl ca-certificates\n\n \n\n/etc/init.d/banip enable\n\n/etc/init.d/banip start\n\n \n\n# ===== Step 13: Configure GeoIP blocking =====\n\n# Requires ipset and geoip modules installed (pre-install geoip-core etc.)\n\n# Example: block CN, RU, KP, IR - modify as needed\n\n \n\nipset create geo_blacklist hash:net hashsize 1024 maxelem 65536 2>/dev/null || true\n\n \n\nfor country in CN RU KP IR; do\n\n  wget -qO- https://www.ipdeny.com/ipblocks/data/countries/${country,,}.zone | while read ip; do\n\n    ipset add geo_blacklist $ip 2>/dev/null || true\n\n  done\n\ndone\n\n \n\nuci delete firewall.geoip_block 2>/dev/null\n\nuci set firewall.geoip_block='rule'\n\nuci set firewall.geoip_block.name='Block GeoIP Blacklist'\n\nuci set firewall.geoip_block.src='wan'\n\nuci set firewall.geoip_block.src_ipset='geo_blacklist'\n\nuci set firewall.geoip_block.target='DROP'\n\n \n\n# ===== Step 14: Rate limit IoT services to reduce noisy devices impact =====\n\nuci delete firewall.iot_ssh_limit 2>/dev/null\n\nuci set firewall.iot_ssh_limit='rule'\n\nuci set firewall.iot_ssh_limit.name='Limit IoT SSH'\n\nuci set firewall.iot_ssh_limit.src='iot'\n\nuci set firewall.iot_ssh_limit.dest_port='22'\n\nuci set firewall.iot_ssh_limit.proto='tcp'\n\nuci set firewall.iot_ssh_limit.target='ACCEPT'\n\nuci set firewall.iot_ssh_limit.limit='3/minute'\n\nuci set firewall.iot_ssh_limit.limit_burst='6'\n\n \n\nuci delete firewall.iot_mdns_limit 2>/dev/null\n\nuci set firewall.iot_mdns_limit='rule'\n\nuci set firewall.iot_mdns_limit.name='Limit IoT mDNS'\n\nuci set firewall.iot_mdns_limit.src='iot'\n\nuci set firewall.iot_mdns_limit.dest_port='5353'\n\nuci set firewall.iot_mdns_limit.proto='udp'\n\nuci set firewall.iot_mdns_limit.target='ACCEPT'\n\nuci set firewall.iot_mdns_limit.limit='10/minute'\n\nuci set firewall.iot_mdns_limit.limit_burst='20'\n\n \n\n# ===== Step 15: Commit all changes =====\n\nuci commit network\n\nuci commit firewall\n\n \n\n# ===== Step 16: Restart services =====\n\n/etc/init.d/network restart\n\n/etc/init.d/firewall restart\n\n/etc/init.d/banip restart", "source_filename": "cididel_ph7.txt", "source_sha256": "c8ab9ca74f2548aca000db49bdbd65042cb878d51e3469a870988e586aa01f19", "chunk_index": 1, "total_chunks": 2}
