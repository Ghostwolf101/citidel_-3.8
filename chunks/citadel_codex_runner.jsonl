{"doc_id": "citadel_codex_runner", "chunk_id": "citadel_codex_runner__0", "chunk_text": "#!/usr/bin/env python3\n\"\"\"\nCitadel Codex Runner\n- Serves a small local web app to browse & search the Citadel library JSONs\n- Or runs a CLI for quick searches (no external dependencies)\nFiles expected (same folder or specify --index/--cards):\n  - citadel_library_index.json   (optional but recommended)\n  - citadel_codex_cards.json     (required for rich metadata)\nUsage:\n  Web UI (default, requires Flask):\n    python citadel_codex_runner.py\n    python citadel_codex_runner.py --host 127.0.0.1 --port 8787\n  CLI (no Flask needed):\n    python citadel_codex_runner.py --cli search \"Shadow Wall\"\n    python citadel_codex_runner.py --cli list\n    python citadel_codex_runner.py --cli show CIT-005\n\"\"\"\n\nimport argparse, json, os, sys, re, textwrap\nfrom pathlib import Path\n\nDEFAULT_INDEX = \"citadel_library_index.json\"\nDEFAULT_CARDS = \"citadel_codex_cards.json\"\n\ndef load_json(path):\n    p = Path(path)\n    if not p.exists():\n        return None\n    with open(p, \"r\", encoding=\"utf-8\") as f:\n        return json.load(f)\n\ndef normalize(s):\n    return re.sub(r\"\\s+\", \" \", (s or \"\")).strip().lower()\n\ndef search_cards(cards, query):\n    q = normalize(query)\n    res = []\n    for c in cards:\n        hay = \" \".join([c.get(\"id\",\"\"), c.get(\"title\",\"\"), c.get(\"summary\",\"\"), \" \".join(c.get(\"key_topics\",[])), c.get(\"category\",\"\")])\n        if q in normalize(hay):\n            res.append(c)\n    return res\n\ndef cli_mode(cards, index, args):\n    if args.cli_command == \"list\":\n        for c in cards:\n            print(f\"{c['id']:>7}  {c['title']}  [{c['category']}]\")\n        return 0\n    elif args.cli_command == \"search\":\n        if not args.term:\n            print(\"Provide a search term, e.g. --cli search \\\"Shadow Wall\\\"\")\n            return 1\n        hits = search_cards(cards, \" \".join(args.term))\n        if not hits:\n            print(\"No matches.\")\n            return 0\n        for c in hits:\n            print(f\"\\n{c['id']} — {c['title']} [{c['category']}]\")\n            print(textwrap.fill(c.get(\"summary\",\"\"), width=80))\n            if c.get(\"key_topics\"):\n                print(\"Topics:\", \", \".join(c[\"key_topics\"]))\n            if c.get(\"origin_file\"):\n                print(\"File:\", c[\"origin_file\"])\n        return 0\n    elif args.cli_command == \"show\":\n        if not args.term:\n            print(\"Provide an ID, e.g. --cli show CIT-005\")\n            return 1\n        target = args.term[0]\n        for c in cards:\n            if c.get(\"id\") == target:\n                print(json.dumps(c, indent=2))\n                return 0\n        print(\"Not found.\")\n        return 1\n    else:\n        print(\"Unknown CLI command. Use: list | search | show\")\n        return 1\n\ndef try_web_mode(cards, index, host, port):\n    try:\n        from flask import Flask, render_template_string, request, send_from_directory\n    except Exception as e:\n        print(\"[info] Flask not available. Use --cli for command-line mode.\")\n        print(\"       pip install flask   # to enable the web UI\")\n        return 1\n\n    ", "source_filename": "citadel_codex_runner.py", "source_sha256": "ca6710b879786304cf4de456a7c489c7ae7a04385fd5995294003c16975a8aa7", "chunk_index": 0, "total_chunks": 4}
{"doc_id": "citadel_codex_runner", "chunk_id": "citadel_codex_runner__1", "chunk_text": "ctory\n    except Exception as e:\n        print(\"[info] Flask not available. Use --cli for command-line mode.\")\n        print(\"       pip install flask   # to enable the web UI\")\n        return 1\n\n    app = Flask(__name__)\n\n    TEMPLATE = r\"\"\"\n<!doctype html>\n<html>\n<head>\n  <meta charset=\"utf-8\"/>\n  <title>Citadel Codex</title>\n  <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\"/>\n  <style>\n    :root { --bg:#0b1020; --fg:#e8eefc; --muted:#9bb0d6; --card:#141a33; --acc:#8aa2ff; }\n    body { background:var(--bg); color:var(--fg); font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial; margin:0; }\n    header { padding:16px 20px; border-bottom:1px solid #243055; position:sticky; top:0; background:linear-gradient(180deg, rgba(11,16,32,.95), rgba(11,16,32,.8)); backdrop-filter: blur(6px); }\n    h1 { margin:0; font-size:20px; letter-spacing:.5px; }\n    .container { max-width:1100px; margin:0 auto; padding:20px; }\n    .search { display:flex; gap:10px; margin:16px 0 8px; }\n    input[type=text] { flex:1; padding:12px 14px; border-radius:12px; border:1px solid #2b3866; background: #0e1430; color:var(--fg); }\n    button { padding:12px 16px; border-radius:12px; border:1px solid #2b3866; background:#17224a; color:var(--fg); cursor:pointer; }\n    button:hover { background:#1d2a5c; }\n    .grid { display:grid; grid-template-columns: repeat(auto-fit, minmax(260px, 1fr)); gap:14px; margin-top:12px; }\n    .card { background:var(--card); border:1px solid #22305a; border-radius:16px; padding:14px; display:flex; flex-direction:column; gap:8px; }\n    .badge { font-size:12px; color:var(--muted); }\n    .title { font-weight:700; }\n    .topics { font-size:12px; color:var(--muted); }\n    .linkbar { display:flex; gap:10px; margin-top:auto; }\n    a.btn { text-decoration:none; color:var(--fg); background:#22305a; border:1px solid #30407a; padding:8px 10px; border-radius:10px; font-size:14px; }\n    a.btn:hover { background:#2a478e; }\n    .muted { color:var(--muted); font-size:12px; }\n    footer { text-align:center; color:#7d90c7; padding:20px; }\n  </style>\n</head>\n<body>\n<header>\n  <h1>Citadel Codex — Library Runner</h1>\n  <div class=\"container\">\n    <form class=\"search\" method=\"GET\" action=\"/\">\n      <input type=\"text\" name=\"q\" placeholder=\"Search titles, topics, or summaries…\" value=\"{{q|e}}\"/>\n      <button type=\"submit\">Search</button>\n      <a class=\"btn\" href=\"/\">Reset</a>\n    </form>\n    <div class=\"muted\">{{count}} item(s) {{ 'matched' if q else 'loaded' }}</div>\n  </div>\n</header>\n<div class=\"container\">\n  <div class=\"grid\">\n    {% for c in cards %}\n    <div class=\"card\">\n      <div class=\"badge\">{{ c.category }}</div>\n      <div class=\"title\">{{ c.id }} — {{ c.title }}</div>\n      <div class=\"summary\">{{ c.summary }}</div>\n      {% if c.key_topics %}<div class=\"topics\">Topics: {{ \", \".join(c.key_topics) }}</div>{% endif %}\n      <div class=\"linkbar\">\n        {% if c.origin_file %}\n          <a class=\"btn\" href=\"/open/{", "source_filename": "citadel_codex_runner.py", "source_sha256": "ca6710b879786304cf4de456a7c489c7ae7a04385fd5995294003c16975a8aa7", "chunk_index": 1, "total_chunks": 4}
{"doc_id": "citadel_codex_runner", "chunk_id": "citadel_codex_runner__2", "chunk_text": "\n      {% if c.key_topics %}<div class=\"topics\">Topics: {{ \", \".join(c.key_topics) }}</div>{% endif %}\n      <div class=\"linkbar\">\n        {% if c.origin_file %}\n          <a class=\"btn\" href=\"/open/{{ c.origin_file }}\">Open File</a>\n        {% endif %}\n        <a class=\"btn\" href=\"/api/card/{{ c.id }}\">JSON</a>\n      </div>\n    </div>\n    {% endfor %}\n  </div>\n\n  <h3 style=\"margin-top:28px;\">Raw Index & API</h3>\n  <ul>\n    <li><a class=\"btn\" href=\"/api/cards\">GET /api/cards</a></li>\n    <li><a class=\"btn\" href=\"/api/index\">GET /api/index</a></li>\n  </ul>\n</div>\n<footer>Built for the Commander. Memory is sacred.</footer>\n</body>\n</html>\n    \"\"\"\n\n    CARDS = cards or []\n    INDEX = index or []\n\n    @app.route(\"/\")\n    def home():\n        q = request.args.get(\"q\",\"\").strip()\n        results = CARDS\n        if q:\n            results = search_cards(CARDS, q)\n        return render_template_string(TEMPLATE, cards=results, q=q, count=len(results))\n\n    @app.route(\"/api/cards\")\n    def api_cards():\n        return CARDS\n\n    @app.route(\"/api/index\")\n    def api_index():\n        return INDEX\n\n    @app.route(\"/api/card/<cid>\")\n    def api_card(cid):\n        for c in CARDS:\n            if c.get(\"id\") == cid:\n                return c\n        return {\"error\":\"not found\"}, 404\n\n    @app.route(\"/open/<path:filename>\")\n    def open_file(filename):\n        # Serve files from current directory where JSONs and docs reside\n        # Security note: for local use only.\n        base = Path(\".\").resolve()\n        file_path = (base / filename).resolve()\n        if not str(file_path).startswith(str(base)):\n            return \"Invalid path\", 400\n        if not file_path.exists():\n            return \"File not found\", 404\n        return send_from_directory(base, filename, as_attachment=False)\n\n    print(f\"[web] running at http://{host}:{port}\")\n    app.run(host=host, port=port, debug=False)\n    return 0\n\ndef main():\n    parser = argparse.ArgumentParser(description=\"Citadel Codex Runner\")\n    parser.add_argument(\"--index\", default=DEFAULT_INDEX, help=\"Path to citadel_library_index.json\")\n    parser.add_argument(\"--cards\", default=DEFAULT_CARDS, help=\"Path to citadel_codex_cards.json\")\n    parser.add_argument(\"--host\", default=\"127.0.0.1\")\n    parser.add_argument(\"--port\", default=8787, type=int)\n    parser.add_argument(\"--cli\", action=\"store_true\", help=\"Run in CLI mode (no Flask needed)\")\n    parser.add_argument(\"cli_command\", nargs=\"?\", help=\"CLI: list | search | show\")\n    parser.add_argument(\"term\", nargs=\"*\", help=\"CLI: search terms or show <ID>\")\n    args = parser.parse_args()\n\n    cards = load_json(args.cards) or []\n    index = load_json(args.index) or []\n\n    if args.cli:\n        if not cards:\n            print(\"No cards loaded. Ensure citadel_codex_cards.json exists or pass --cards path.\")\n            return 1\n        return cli_mode(cards, index, args)\n    else:\n        # Web mode preferred\n        return try_web_mode(cards, index, args.host, args.port)\n\nif __name__ ", "source_filename": "citadel_codex_runner.py", "source_sha256": "ca6710b879786304cf4de456a7c489c7ae7a04385fd5995294003c16975a8aa7", "chunk_index": 2, "total_chunks": 4}
{"doc_id": "citadel_codex_runner", "chunk_id": "citadel_codex_runner__3", "chunk_text": "ss --cards path.\")\n            return 1\n        return cli_mode(cards, index, args)\n    else:\n        # Web mode preferred\n        return try_web_mode(cards, index, args.host, args.port)\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n", "source_filename": "citadel_codex_runner.py", "source_sha256": "ca6710b879786304cf4de456a7c489c7ae7a04385fd5995294003c16975a8aa7", "chunk_index": 3, "total_chunks": 4}
