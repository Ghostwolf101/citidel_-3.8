{"doc_id": "citidell_file_ui", "chunk_id": "citidell_file_ui__0", "chunk_text": "python3 - <<'PY'\nimport os, json, hashlib, datetime, shutil, glob\n\nROOT = os.path.abspath(\".\")\nNOW = datetime.datetime.utcnow().strftime(\"%Y-%m-%dT%H-%M-%SZ\")\nOUTDIR = os.path.join(ROOT, f\"citadel_bind_{NOW}\")\nos.makedirs(OUTDIR, exist_ok=True)\n\n# 1) Ensure Ladder alias exists (many manifests expect this exact name)\nladder_src = None\nfor name in [\"Ladder_Doctrine.v1.json\",\"ladder_doctrine.v1.json\"]:\n    p = os.path.join(ROOT, name)\n    if os.path.isfile(p):\n        ladder_src = p\n        break\nif ladder_src:\n    alias = os.path.join(ROOT, \"Citadel_Ladder_Doctrine.v1.json\")\n    if not os.path.isfile(alias):\n        shutil.copy2(ladder_src, alias)\n\n# 2) Build a fresh hash ledger of all relevant files in this folder\nEXTS = {\".json\",\".txt\",\".pdf\",\".html\",\".htm\",\".md\",\".toml\",\".conf\",\".yaml\",\".yml\",\".py\",\".zip\"}\ndef sha256(path, chunk=1024*1024):\n    h = hashlib.sha256()\n    with open(path,\"rb\") as f:\n        for b in iter(lambda: f.read(chunk), b\"\"):\n            h.update(b)\n    return h.hexdigest()\n\ndef sha512(path, chunk=1024*1024):\n    h = hashlib.sha512()\n    with open(path,\"rb\") as f:\n        for b in iter(lambda: f.read(chunk), b\"\"):\n            h.update(b)\n    return h.hexdigest()\n\nfiles = []\nfor name in sorted(os.listdir(ROOT)):\n    p = os.path.join(ROOT, name)\n    if os.path.isfile(p) and os.path.splitext(name)[1].lower() in EXTS:\n        files.append(name)\n\nledger = []\nfor name in files:\n    p = os.path.join(ROOT, name)\n    try:\n        item = {\n            \"filename\": name,\n            \"size_bytes\": os.path.getsize(p),\n            \"sha256\": sha256(p),\n            \"sha512\": sha512(p),\n            \"exists_at_source\": True,\n            \"source_path\": p\n        }\n    except Exception as e:\n        item = {\"filename\": name, \"error\": str(e), \"exists_at_source\": False}\n    ledger.append(item)\n\n# 3) Emit master ledger + a simplified Ledger_Map.json compatible with your setup\nwith open(os.path.join(OUTDIR, \"Citadel_Master_Hash_Ledger.json\"), \"w\", encoding=\"utf-8\") as f:\n    json.dump({\"generated_utc\": NOW, \"root\": ROOT, \"files\": ledger}, f, indent=2)\n\ncore_names = [\n    \"The_Commanders_Vow_Citadel_Core.json\",\n    \"Citadel_Core_Covenant_TripleCheck.txt\",\n    \"Right of Sanctuary doctrine.txt\",\n    \"Citadel_Ladder_Doctrine.v1.json\",\n    \"Citadel_Master_Codex_HOPE.v1_1.json\",\n    \"Citadel_Seal_Manifest.v1.json\",\n    \"Ledger_Map.json\"  # may be replaced by this run\n]\ncore_map = []\nfor n in core_names:\n    p = os.path.join(ROOT, n)\n    rec = {\"name\": n, \"present\": os.path.isfile(p)}\n    if rec[\"present\"]:\n        rec[\"sha256\"] = sha256(p)\n        rec[\"path\"] = p\n    core_map.append(rec)\n\nwith open(os.path.join(OUTDIR, \"Ledger_Map.json\"), \"w\", encoding=\"utf-8\") as f:\n    json.dump({\"generated_utc\": NOW, \"root\": ROOT, \"core\": core_map}, f, indent=2)\n\n# 4) If the codex cards are missing, make a working set so the UI can start\ncards_path = os.path.join(ROOT, \"citadel_codex_cards.json\")\nif not os.path.isfile(cards_path):\n    def have(n): return os.path.isfile(", "source_filename": "citidell_file_ui", "source_sha256": "ae0bf6d13575f0b58217c19a3133259259a612f529ce0072a8e9c7a29cffb889", "chunk_index": 0, "total_chunks": 2}
{"doc_id": "citidell_file_ui", "chunk_id": "citidell_file_ui__1", "chunk_text": "e codex cards are missing, make a working set so the UI can start\ncards_path = os.path.join(ROOT, \"citadel_codex_cards.json\")\nif not os.path.isfile(cards_path):\n    def have(n): return os.path.isfile(os.path.join(ROOT,n))\n    cards = []\n    def add(cid,title,summary,cat,origin):\n        if have(origin):\n            cards.append({\n                \"id\": cid, \"title\": title, \"summary\": summary,\n                \"category\": cat, \"key_topics\": [], \"origin_file\": origin\n            })\n    add(\"CIT-001\",\"The Commander's Vow\",\"Prime Memory Seal & Citadel Core vow.\",\"Vow\",\"The_Commanders_Vow_Citadel_Core.json\")\n    add(\"CIT-002\",\"Right of Sanctuary Doctrine\",\"Defines the Right of Sanctuary.\",\"Doctrine\",\"Right of Sanctuary doctrine.txt\")\n    add(\"CIT-003\",\"Ladder Doctrine (alias)\",\"Ladder doctrine (alias ensured).\",\"Doctrine\",\"Citadel_Ladder_Doctrine.v1.json\")\n    add(\"CIT-004\",\"HOPE Master Codex\",\"Codex spine; sources must be bound.\",\"Codex\",\"Citadel_Master_Codex_HOPE.v1_1.json\")\n    add(\"CIT-005\",\"Seal Manifest\",\"Registry of seals and paths.\",\"Manifest\",\"Citadel_Seal_Manifest.v1.json\")\n    add(\"CIT-006\",\"Ledger Map\",\"Crossâ€‘references for manifests & doctrine.\",\"Ledger\",\"Ledger_Map.json\") if have(\"Ledger_Map.json\") else None\n    add(\"CIT-007\",\"Obsidian Verification\",\"Threat assessment & precision auth.\",\"Security\",\"obsidian_verification.py\")\n    add(\"CIT-008\",\"Feneris Counterstrike\",\"Shadow Wall protocol (Directive 48).\",\"Security\",\"feneris_counterstrike.json\")\n    add(\"CIT-009\",\"Sovrenth Chronicle\",\"Narrative/chronicle HTML.\",\"Chronicle\",\"sovrenth.html\")\n    add(\"CIT-010\",\"Epsilon Authority Card\",\"Ceremonial marker.\",\"Ceremonial\",\"Epsilon_Authority_Card_Ceremonial.pdf\")\n\n    with open(cards_path, \"w\", encoding=\"utf-8\") as f:\n        json.dump(cards, f, indent=2)\n\nprint(\"== Citadel quick-repair complete ==\")\nprint(\"Output folder:\", OUTDIR)\nprint(\"If you need the UI, run:\\n  python3 citadel_codex_runner.py --host 127.0.0.1 --port 8787\")\nPY\n", "source_filename": "citidell_file_ui", "source_sha256": "ae0bf6d13575f0b58217c19a3133259259a612f529ce0072a8e9c7a29cffb889", "chunk_index": 1, "total_chunks": 2}
